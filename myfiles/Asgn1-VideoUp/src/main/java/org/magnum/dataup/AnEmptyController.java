/*
 * 
 * Copyright 2014 Jules White
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */
package org.magnum.dataup;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicLong;

import javax.servlet.http.HttpServletRequest;

import org.magnum.dataup.model.Video;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import org.springframework.web.multipart.MultipartFile;

@Controller
public class AnEmptyController {

	/**
	 * You will need to create one or more Spring controllers to fulfill the
	 * requirements of the assignment. If you use this file, please rename it
	 * to something other than "AnEmptyController"
	 * 
	 * 
		 ________  ________  ________  ________          ___       ___  ___  ________  ___  __       
		|\   ____\|\   __  \|\   __  \|\   ___ \        |\  \     |\  \|\  \|\   ____\|\  \|\  \     
		\ \  \___|\ \  \|\  \ \  \|\  \ \  \_|\ \       \ \  \    \ \  \\\  \ \  \___|\ \  \/  /|_   
		 \ \  \  __\ \  \\\  \ \  \\\  \ \  \ \\ \       \ \  \    \ \  \\\  \ \  \    \ \   ___  \  
		  \ \  \|\  \ \  \\\  \ \  \\\  \ \  \_\\ \       \ \  \____\ \  \\\  \ \  \____\ \  \\ \  \ 
		   \ \_______\ \_______\ \_______\ \_______\       \ \_______\ \_______\ \_______\ \__\\ \__\
		    \|_______|\|_______|\|_______|\|_______|        \|_______|\|_______|\|_______|\|__| \|__|

	 * 
	 */

	// Initialize a list of videos that the controller will maintain in memory
	private final Map<Long, Video> videos = new HashMap<Long, Video>();

	private static AtomicLong currentId = new AtomicLong(0L);

	private VideoFileManager mVideoFileManager;

	public static final String VIDEO_PATH = "/video";
	public static final String VIDEO_ID_DATA_PATH = "/video/{id}/data";

	
	
	
	
	@RequestMapping(value=VIDEO_PATH, method = RequestMethod.GET)
	public @ResponseBody Map<Long, Video> getVideos() {

		return videos;	
	}


	/**
	 * POST /video
	 * 
	 * The video metadata is provided as an application/json request
     * body. The JSON should generate a valid instance of the 
     * Video class when deserialized by Spring's default 
     * Jackson library.
	 * 
	 * Returns the JSON representation of the Video object that
     * was stored along with any updates to that object made by the server.
	 * @param video
	 * @return
	 */
	@RequestMapping(value = VIDEO_PATH, method = RequestMethod.POST) 
	public @ResponseBody Video createVideo(
			@RequestBody Video video) {
		
		if (mVideoFileManager.hasVideoData(video)) {
			checkAndSetId(video);
			videos.put(video.getId(), video);
			return video;
		}
		return video;  // The video object will be returned, and Jackson will convert it to proper JSON when the client receives it
		
	}
	

	/**
	 * POST /video/{id}/data
	 * Upload a video... after the user has created it
	 * 
	 * The binary mpeg data for the video should be provided in a multipart
     * request as a part with the key "data". The id in the path should be
     * replaced with the unique identifier generated by the server for the
     * Video
	 * @param videoData
	 * @return
	 * @throws IOException 
	 */
	@RequestMapping(value = VIDEO_ID_DATA_PATH, method = RequestMethod.POST) 
	public @ResponseBody Video uploadVideo(
			@PathVariable("video") Video video,
			@PathVariable("data") MultipartFile videoData) 
			throws IOException {
		
		checkAndSetId(video);
		videos.put(video.getId(), video);
		saveVideoData(video, videoData);
		return video;
	}

	/**
	 * GET /video/{id}/data
	 * 
     * Returns the binary mpeg data (if any) for the video with the given
     * identifier. If no mpeg data has been uploaded for the specified video,
     * then the server should return a 404 status code.
	 * @param id
	 * @return video
	 * @throws FileNotFoundException 
	 */
	@RequestMapping(value = VIDEO_ID_DATA_PATH, method = RequestMethod.GET) 
	public @ResponseBody Video getVideoById(
			@PathVariable("video") Video video,
			@PathVariable("data") MultipartFile videoData) throws FileNotFoundException {
		
		
		if (mVideoFileManager.hasVideoData(video)) {
			return video;
		} else {
			throw new FileNotFoundException();
		}
			
	}

	
	
	
	
	///////////////////////////////////// HELPERS //////////////////////////////////////////
	
	/**
	 * Helper method for when we save a video to the database...
	 * Ensures that the video's id != 0 before setting it.
	 */
	private void checkAndSetId(Video video) {
		if (video.getId() == 0) {
			video.setId(currentId.incrementAndGet());
		}
	}
	
	
	/**
	 * Helper method for getting the url of a video based
	 * on the attainment of an id
	 */
	private String getDataUrl(Long videoId) {
		String dataUrl = getUrlBaseForLocalServer() + "/video/" + videoId.toString() + "/data";
		return dataUrl;
	}
	
	
	/**
	 * Helps the helper method for getting the url of a video by
	 * generating the urlbase for a local server
	 */
	private String getUrlBaseForLocalServer() {
		HttpServletRequest request = 
				((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
		String base = 
				"http://" + request.getServerName()
				+ ((request.getServerPort() != 80) ? ":" + request.getServerPort() : "");
		return base;
	}
	
	
	/**
	 * Saves a video to the file system in the working directory
	 * by using the VideoManager and exposing the MultipartFile information
	 * reviceived by the controller
	 * @throws IOException 
	 */
	private void saveVideoData(Video v, MultipartFile videoData) throws IOException {
		mVideoFileManager.saveVideoData(v, videoData.getInputStream());
	}
	
	
	
	
	
 }
